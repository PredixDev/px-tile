{"version":3,"sources":["px-action-buttons.es6.js"],"names":["Polymer","is","properties","actionButtons","type","Object","value","observer","attached","listen","detached","unlisten","_actionButtonsChanged","_notifyActionChange","_isDropdown","items","length","async","pxDropdown","$$","multi","x","selected","key","set","dropdown","dom","root","querySelector","button","pxIcon","style","right","_onSelected","evt","item","detail","model","_handleSelection","val","_itemSelected","_displayValueSelected","fire"],"mappings":"aAAA,CAAC,UAAW,CACVA,QAAQ,CAENC,GAAI,mBAFE,CAINC,WAAY,CACV;;;SAIAC,cAAe,CACbC,KAAMC,MADO,CAEbC,MAAO,EAFM,CAGbC,SAAU,uBAHG,CALL,CAJN,CAeN;;OAGAC,QAlBM,oBAkBK,CACT,KAAKC,MAAL,CAAY,IAAZ,CAAkB,+BAAlB,CAAmD,eAAnD,CACD,CApBK,CAqBN;;OAGAC,QAxBM,oBAwBK,CACT,KAAKC,QAAL,CAAc,IAAd,CAAoB,+BAApB,CAAqD,eAArD,CACD,CA1BK,CA2BN;;;;OAKAC,qBAhCM,iCAgCkB,CACtB;AACA,KAAKC,mBAAL,CAA2B,KAA3B,CACA,KAAKC,WAAL,CAAmB,KAAKX,aAAL,EAAsB,KAAKA,aAAL,CAAmBY,KAAzC,EAAkD,KAAKZ,aAAL,CAAmBY,KAAnB,CAAyBC,MAAzB,CAAkC,CAAvG,CACA,GAAG,KAAKF,WAAR,CAAqB,CACnB,KAAKG,KAAL,CAAW,UAAW,CACpB,GAAIC,YAAa,KAAKC,EAAL,CAAQ,aAAR,CAAjB,CACA,GAAG,CAAC,KAAKhB,aAAL,CAAmBiB,KAAvB,CAA8B,CAC5B;AACA,IAAI,GAAIC,EAAR,GAAa,MAAKlB,aAAL,CAAmBY,KAAhC,CAAuC,CACrC,MAAO,MAAKZ,aAAL,CAAmBY,KAAnB,CAAyBM,CAAzB,EAA4BC,QACpC,CACF,CACD,IAAI,GAAIC,IAAR,GAAe,MAAKpB,aAApB,CAAmC,CACjCe,WAAWM,GAAX,CAAeD,GAAf,CAAoB,KAAKpB,aAAL,CAAmBoB,GAAnB,CAApB,CACD,CACD,KAAKN,KAAL,CAAW,UAAW,CACpB;AACA,GAAIQ,UAAWzB,QAAQ0B,GAAR,CAAYR,WAAWS,IAAvB,EAA6BC,aAA7B,CAA2C,WAA3C,CAAf,CACAH,SAASD,GAAT,CAAa,iBAAb,CAAgC,OAAhC,EACA,GAAIK,QAAS7B,QAAQ0B,GAAR,CAAYR,WAAWS,IAAvB,EAA6BC,aAA7B,CAA2C,SAA3C,CAAb,CACA,GAAIE,QAAS9B,QAAQ0B,GAAR,CAAYG,MAAZ,EAAoBD,aAApB,CAAkC,SAAlC,CAAb,CACA,GAAGE,MAAH,CAAW,CACTA,OAAOC,KAAP,CAAaC,KAAb,CAAqB,MACtB,CACD,KAAKnB,mBAAL,CAA2B,IAC5B,CAVD,CAWD,CAtBD,CAsBG,GAtBH,CAuBD,CAxBD,IAwBO,CACL,KAAKA,mBAAL,CAA2B,IAC5B,CACF,CA/DK,CAgEN;;OAGAoB,WAnEM,sBAmEMC,GAnEN,CAmEW,CACf,GAAIC,MAAOD,IAAIE,MAAJ,CAAWC,KAAX,EAAoBH,IAAIG,KAAJ,CAAUF,IAAzC,CACA,KAAKG,gBAAL,CAAsB,CACpBC,IAAKJ,KAAKI,GADU,CAEpBhB,IAAKY,KAAKZ,GAFU,CAAtB,CAID,CAzEK,CA0EN;;OAGAiB,aA7EM,wBA6EQN,GA7ER,CA6Ea,CACjB,GAAIhB,YAAa,KAAKC,EAAL,CAAQ,aAAR,CAAjB,CACA,GAAG,KAAKhB,aAAL,CAAmBiB,KAAnB,EAA4BF,WAAWuB,qBAAX,GAAqCP,IAAIE,MAAJ,CAAWG,GAA/E,CAAoF,CAClF,KAAKD,gBAAL,CAAsBJ,IAAIE,MAA1B,CACD,CACF,CAlFK,CAmFN;;OAGAE,gBAtFM,2BAsFWF,MAtFX,CAsFmB,CACvB,GAAG,KAAKvB,mBAAR,CAA6B,CAC3B,KAAK6B,IAAL,CAAU,4BAAV,CAAwCN,MAAxC,CACD,CACF,CA1FK,CAAR,CA4FD,CA7FD","file":"px-action-buttons.js","sourcesContent":["(function() {\n  Polymer({\n\n    is: 'px-action-buttons',\n\n    properties: {\n      /**\n       * Action buttons to display below the description/copy text.\n       * Please refer to px-dropdown (https://github.com/PredixDev/px-dropdown) for a list of supported properties\n       */\n      actionButtons: {\n        type: Object,\n        value: {},\n        observer: '_actionButtonsChanged'\n      }\n    },\n    /**\n     * Attach event listeners for dropdown action buttons.\n     */\n    attached() {\n      this.listen(this, 'px-dropdown-selection-changed', '_itemSelected');\n    },\n    /**\n     * Detach event listeners for dropdown action buttons.\n     */\n    detached() {\n      this.unlisten(this, 'px-dropdown-selection-changed', '_itemSelected');\n    },\n    /**\n     * Observer when actionButtons changes.  \n     * Sets flag _isDropdown true if actionButtons size is greater than 3, false otherwise.\n     * If _isDropdown === true it will update px-dropdown options menu\n     */\n    _actionButtonsChanged() {\n      // set _notifyActionChange false to prevent firing px-dropdown-selection-changed while updating the new set of buttons\n      this._notifyActionChange = false;\n      this._isDropdown = this.actionButtons && this.actionButtons.items && this.actionButtons.items.length > 3;\n      if(this._isDropdown) {\n        this.async(function() {\n          let pxDropdown = this.$$('#pxDropdown');\n          if(!this.actionButtons.multi) {\n            // remove selected if passed on when is not multi selection\n            for(var x in this.actionButtons.items) {\n              delete this.actionButtons.items[x].selected;\n            }\n          }\n          for(var key in this.actionButtons) {\n            pxDropdown.set(key, this.actionButtons[key]);\n          }\n          this.async(function() {\n            // adjust dropdown to appear aligned to the right\n            let dropdown = Polymer.dom(pxDropdown.root).querySelector('#dropdown');\n            dropdown.set('horizontalAlign', 'right');\n            let button = Polymer.dom(pxDropdown.root).querySelector('#button');\n            let pxIcon = Polymer.dom(button).querySelector('px-icon');\n            if(pxIcon) {\n              pxIcon.style.right = '-6px';\n            }\n            this._notifyActionChange = true;\n          });\n        }, 100);\n      } else {\n        this._notifyActionChange = true;\n      }\n    },\n    /**\n     * Callback for on-tap event for action items when the list size is 3 or less\n     */\n    _onSelected(evt) {\n      let item = evt.detail.model || evt.model.item;\n      this._handleSelection({\n        val: item.val, \n        key: item.key\n      });\n    },\n    /**\n     * Callback for selected/unselected action title dropdown items when the list is greater than 3\n     */\n    _itemSelected(evt) {\n      let pxDropdown = this.$$('#pxDropdown');\n      if(this.actionButtons.multi || pxDropdown._displayValueSelected === evt.detail.val) {\n        this._handleSelection(evt.detail);\n      }\n    },\n    /**\n     * Fires px-title-action with selection detail. E.g. {key: \"1\", val: \"Favorite\", selected: true}\n     */\n    _handleSelection(detail) {\n      if(this._notifyActionChange) {\n        this.fire('px-title-on-action-clicked', detail);\n      }\n    }\n  });\n})();\n"]}