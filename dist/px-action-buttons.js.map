{"version":3,"sources":["px-action-buttons.es6.js"],"names":["Polymer","is","properties","actionButtons","type","Object","value","observer","hoverTextColor","String","isOverlay","Boolean","isPrimary","created","_maxIcons","attached","listen","detached","unlisten","_actionButtonsChanged","_notifyActionChange","actionBtns","JSON","parse","stringify","dropdownCount","x","items","_isDisplayDropdown","_isDisplayButtons","async","pxDropdown","$$","style","height","item","key","id","val","label","multi","selected","sortMode","selectBy","set","dropdown","dom","root","querySelector","button","pxIcon","right","color","_onSelected","evt","detail","model","_handleSelection","_itemSelected","_displayValueSelected","fire","_getBtnClazz","clazzset","_getBtnSize","size","_getBtnType","buttonIcon","push","disabled","join","trim","array","_getBtnColor"],"mappings":"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","file":"px-action-buttons.js","sourcesContent":["(function() {\n  Polymer({\n\n    is: 'px-action-buttons',\n\n    properties: {\n      /**\n       * Action buttons to display below the description/copy text.\n       * Please refer to px-dropdown (https://github.com/PredixDev/px-dropdown) for a list of supported properties\n       */\n      actionButtons: {\n        type: Object,\n        value: {},\n        observer: '_actionButtonsChanged'\n      },\n      /**\n       * Current text color of overlay to apply other elements when hovering\n       */\n      hoverTextColor: {\n        type: String,\n        value: ''\n      },\n      /**\n       * Boolean to find out if items list is in overlay\n       */\n      isOverlay: {\n        type: Boolean,\n        value: false\n      },\n      /**\n       * Boolean to display primary button\n       */\n      isPrimary: {\n        type: Boolean,\n        value: false\n      }\n    },\n    created() {\n      this._maxIcons = 3;\n    },\n    /**\n     * Attach event listeners for dropdown action buttons.\n     */\n    attached() {\n      this.listen(this, 'px-dropdown-selection-changed', '_itemSelected');\n    },\n    /**\n     * Detach event listeners for dropdown action buttons.\n     */\n    detached() {\n      this.unlisten(this, 'px-dropdown-selection-changed', '_itemSelected');\n    },\n    /**\n     * Observer when actionButtons changes.  \n     * Sets flag _isDisplayDropdown true if actionButtons size is greater than default items size 3, false otherwise.\n     * Sets flag _isDisplayButtons true if actionButtons size is less or equal than default items size 3, false otherwise.\n     * If _isDisplayDropdown === true it will update px-dropdown options menu\n     */\n    _actionButtonsChanged() {\n      // set _notifyActionChange false to prevent firing px-dropdown-selection-changed while updating the new set of buttons\n      this._notifyActionChange = false;\n      //this._isDisplayDropdown = this.actionButtons && this.actionButtons.items && this.actionButtons.items.length > this._maxIcons;\n      let actionBtns = JSON.parse(JSON.stringify(this.actionButtons));\n      \n      let dropdownCount = 0;\n      for(let x in actionBtns.items) {\n        if(!actionBtns.items[x].isPrimary) {\n          dropdownCount++;\n        }\n      }\n      this._isDisplayDropdown = dropdownCount > this._maxIcons;\n      \n      if(this.isPrimary) {\n        this._isDisplayButtons = true;\n        this._isDisplayDropdown = false;\n      } else if(this._isDisplayDropdown) {\n        this.async(function() {\n          let pxDropdown = this.$$('#pxDropdown');\n          pxDropdown.style.height = '20px';\n          for(let x in actionBtns.items) {\n            // px-dropdown has key and val\n            let item = actionBtns.items[x];\n            item.key = item.id || item.key;\n            item.val = item.label || item.val;\n            delete item.id;\n            delete item.label;\n            if(!actionBtns.multi) {\n              delete item.selected;\n            }\n          }\n          // there are only two options for sortMode and selectBy in px-dropdown\n          if(actionBtns.sortMode && actionBtns.sortMode === 'label') {\n            actionBtns.sortMode = 'val';\n          } else if(actionBtns.sortMode !== 'val') {\n            actionBtns.sortMode = 'key';\n          }\n          if(actionBtns.selectBy && actionBtns.selectBy === 'label') {\n            actionBtns.selectBy = 'val';\n          } else if(actionBtns.selectBy !== 'val') {\n            actionBtns.selectBy = 'key';\n          }\n          for(let id in actionBtns) {\n            pxDropdown.set(id, actionBtns[id]);\n          }\n          this.async(function() {\n            // adjust dropdown to appear aligned to the right\n            let dropdown = Polymer.dom(pxDropdown.root).querySelector('#dropdown');\n            dropdown.set('horizontalAlign', 'right');\n            let button = Polymer.dom(pxDropdown.root).querySelector('#button');\n            this.button = button;\n            this.pxIcon = Polymer.dom(button).querySelector('px-icon');\n            if(this.pxIcon) {\n              this.pxIcon.style.right = '-6px';\n              if(this.isOverlay) {\n                this.pxIcon.style.color = this.hoverTextColor;\n              }\n            }\n            this._notifyActionChange = true;\n          });\n        }, 100);\n      } else {\n        this._isDisplayButtons = true;\n      }\n      this._notifyActionChange = true;\n    },\n    /**\n     * Callback for on-tap event for action items when the list size is 3 or less\n     */\n    _onSelected(evt) {\n      let item = evt.detail.model || evt.model.item;\n      this._handleSelection({\n        label: item.label, \n        id: item.id\n      });\n    },\n    /**\n     * Callback for selected/unselected action title dropdown items when the list is greater than 3\n     */\n    _itemSelected(evt) {\n      let pxDropdown = this.$$('#pxDropdown');\n      if(this.actionButtons.multi || pxDropdown._displayValueSelected === evt.detail.val) {\n        this._handleSelection({\n          label: evt.detail.val, \n          id: evt.detail.key\n        });\n      }\n    },\n    /**\n     * Fires px-title-action with selection detail. E.g. {\"id\": \"1\", \"label\": \"Favorite\", \"selected\": true}\n     */\n    _handleSelection(detail) {\n      if(this._notifyActionChange) {\n        this.fire('px-tile-action-tapped', detail);\n      }\n    },\n    /**\n     * Return button class type and size if any\n     * See https://github.com/PredixDev/px-buttons-design for more details.\n     */\n    _getBtnClazz(item) {\n      let clazzset = this._getBtnSize(item.size);\n      clazzset = this._getBtnType(item.type, clazzset);\n      if(item.buttonIcon === true) {\n        clazzset.push('btn--icon');\n      }\n      if(item.disabled === true) {\n        clazzset.push('btn--disabled');\n      }\n      if( (this.isPrimary && !item.isPrimary) || (!this.isPrimary && item.isPrimary) ) { \n        clazzset.push('hidden');\n      }\n      return clazzset.join(\" \").trim();\n    },\n    /**\n     * Returns button type class\n     */\n    _getBtnType(type, array) {\n      array = array || [];\n      if(type) {\n        switch(type.trim()) {\n          case 'primary':\n            array.push('btn--primary');\n            break;\n          case 'call to action':\n            array.push('btn--call-to-action');\n            break;\n          case 'tertiary':\n            array.push('btn--tertiary');\n            break;\n          case 'bare':\n            array.push('btn--bare');\n            if(this.isOverlay) {\n              array.push('btn-overlay');\n            }\n            break;\n          case 'bare primary':\n            array.push('btn--bare--primary');\n            if(this.isOverlay) {\n              array.push('btn-overlay');\n            } else {\n              array.push('btn-tile-bare-primary');\n            }\n            break;\n        }\n      }\n      return array;\n    },\n    /**\n     * Returns button size class\n     */\n    _getBtnSize(size, array) {\n      array = array || [];\n      if(size) {\n        switch(size.trim()) {\n          case 'small':\n            array.push('btn--small');\n            break;\n          case 'large':\n            array.push('btn--large');\n            break;\n          case 'huge':\n            array.push('btn--huge');\n            break;\n          case 'full':\n            array.push('btn--full');\n            break;\n        }\n      }\n      return array;\n    },\n    /**\n     * Return style for color.  This property is part of px-button so honor if passed on.\n     */\n    _getBtnColor(item) {\n      let color = '';\n      if(item.color) {\n        color = 'color: ' + item.color + '; stroke: ' + item.color + '; ';\n      }\n      return color;\n    }\n  });\n})();\n"]}