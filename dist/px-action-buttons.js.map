{"version":3,"sources":["px-action-buttons.es6.js"],"names":["Polymer","is","properties","actionButtons","type","Object","value","observer","hovered","Boolean","hoverTextColor","String","created","_maxIcons","attached","listen","detached","unlisten","_actionButtonsChanged","_notifyActionChange","_isDropdown","items","length","async","pxDropdown","$$","multi","x","selected","key","set","dropdown","dom","root","querySelector","button","pxIcon","style","right","_onSelected","evt","item","detail","model","_handleSelection","val","_itemSelected","_displayValueSelected","fire","_getBtnClazz","clazz","size","_getBtnColor","color","_hoveredChanged","hoveredClazz","replace","indexOf","JSON","parse","stringify"],"mappings":"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","file":"px-action-buttons.js","sourcesContent":["(function() {\n  Polymer({\n\n    is: 'px-action-buttons',\n\n    properties: {\n      /**\n       * Action buttons to display below the description/copy text.\n       * Please refer to px-dropdown (https://github.com/PredixDev/px-dropdown) for a list of supported properties\n       */\n      actionButtons: {\n        type: Object,\n        value: {},\n        observer: '_actionButtonsChanged'\n      },\n      /**\n       * hovered to add additional class on elements when hovering\n       */\n      hovered: {\n        type: Boolean,\n        value: false,\n        observer: '_hoveredChanged'\n      },\n      /**\n       * Current text color of overlay to apply other elements when hovering\n       */\n      hoverTextColor: {\n        type: String,\n        value: ''\n      }\n    },\n    created() {\n      this._maxIcons = 3;\n    },\n    /**\n     * Attach event listeners for dropdown action buttons.\n     */\n    attached() {\n      this.listen(this, 'px-dropdown-selection-changed', '_itemSelected');\n    },\n    /**\n     * Detach event listeners for dropdown action buttons.\n     */\n    detached() {\n      this.unlisten(this, 'px-dropdown-selection-changed', '_itemSelected');\n    },\n    /**\n     * Observer when actionButtons changes.  \n     * Sets flag _isDropdown true if actionButtons size is greater than 3, false otherwise.\n     * If _isDropdown === true it will update px-dropdown options menu\n     */\n    _actionButtonsChanged() {\n      // set _notifyActionChange false to prevent firing px-dropdown-selection-changed while updating the new set of buttons\n      this._notifyActionChange = false;\n      this._isDropdown = this.actionButtons && this.actionButtons.items && this.actionButtons.items.length > this._maxIcons;\n      if(this._isDropdown) {\n        this.async(function() {\n          let pxDropdown = this.$$('#pxDropdown');\n          if(!this.actionButtons.multi) {\n            // remove selected if passed on when is not multi selection\n            for(let x in this.actionButtons.items) {\n              delete this.actionButtons.items[x].selected;\n            }\n          }\n          for(let key in this.actionButtons) {\n            pxDropdown.set(key, this.actionButtons[key]);\n          }\n          this.async(function() {\n            // adjust dropdown to appear aligned to the right\n            let dropdown = Polymer.dom(pxDropdown.root).querySelector('#dropdown');\n            dropdown.set('horizontalAlign', 'right');\n            let button = Polymer.dom(pxDropdown.root).querySelector('#button');\n            this.button = button;\n            this.pxIcon = Polymer.dom(button).querySelector('px-icon');\n            if(this.pxIcon) {\n              this.pxIcon.style.right = '-6px';\n            }\n            this._notifyActionChange = true;\n          });\n        }, 100);\n      } else {\n        this._notifyActionChange = true;\n      }\n    },\n    /**\n     * Callback for on-tap event for action items when the list size is 3 or less\n     */\n    _onSelected(evt) {\n      let item = evt.detail.model || evt.model.item;\n      this._handleSelection({\n        val: item.val, \n        key: item.key\n      });\n    },\n    /**\n     * Callback for selected/unselected action title dropdown items when the list is greater than 3\n     */\n    _itemSelected(evt) {\n      let pxDropdown = this.$$('#pxDropdown');\n      if(this.actionButtons.multi || pxDropdown._displayValueSelected === evt.detail.val) {\n        this._handleSelection(evt.detail);\n      }\n    },\n    /**\n     * Fires px-title-action with selection detail. E.g. {key: \"1\", val: \"Favorite\", selected: true}\n     */\n    _handleSelection(detail) {\n      if(this._notifyActionChange) {\n        this.fire('px-title-on-action-clicked', detail);\n      }\n    },\n    /**\n     * Return button class type and size if any\n     * See https://github.com/PredixDev/px-buttons-design for more details.\n     */\n    _getBtnClazz(item) {\n      let clazz = item.size || '';\n      clazz = clazz + ' ' + (item.type || '');\n      return clazz;\n    },\n    /**\n     * Return style for color.  This property is part of px-button so honor if passed on.\n     */\n    _getBtnColor(item) {\n      let color = '';\n      if(item.color) {\n        color = 'color: ' + item.color + '; stroke: ' + item.color + '; ';\n      }\n      return color;\n    },\n    /**\n     * Callback to set specific classes for overlay container\n     */\n    _hoveredChanged() {\n      // add class to buttons to change color of text when hovering if these are bare buttons\n      if(this.actionButtons.items && this.actionButtons.items.length <= this._maxIcons) {\n        let hoveredClazz = ' btn-overlay ';\n        for(let x in this.actionButtons.items) {\n          let type = this.actionButtons.items[x].type;\n          type = type? type.replace(hoveredClazz,'') : '';\n          if(this.hovered) {\n            if(type.indexOf('btn--bare') !== -1) {\n              type = type + hoveredClazz;\n            }\n          }\n          this.actionButtons.items[x].type = type;\n          this.set('actionButtons.items.' + x, JSON.parse(JSON.stringify(this.actionButtons.items[x])));\n        }\n      } else if(this.pxIcon) {\n        // this is a dropdown then change the color of the icon on hovering\n        this.pxIcon.style.color = '';\n        if(this.hovered) {\n          this.pxIcon.style.color = this.hoverTextColor;\n        }\n      }\n    }\n  });\n})();\n"]}