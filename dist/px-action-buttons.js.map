{"version":3,"sources":["px-action-buttons.es6.js"],"names":["Polymer","is","properties","actionButtons","type","Object","value","observer","detached","_unlisten","$$","unlisten","_actionButtonsChanged","_notifyActionChange","_isDropdown","items","length","set","async","pxDropdown","multi","x","selected","key","dropdown","dom","root","querySelector","button","pxIcon","style","right","listen","_onSelected","evt","item","detail","model","_handleSelection","val","_itemSelected","_displayValueSelected","console","log","fire","_getBtnSize","size","_getBtnType","_iconStyle","icon"],"mappings":"aAAA,CAAC,UAAW,CACVA,QAAQ,CAENC,GAAI,mBAFE,CAINC,WAAY,CACV;;;SAIAC,cAAe,CACbC,KAAMC,MADO,CAEbC,MAAO,EAFM,CAGbC,SAAU,uBAHG,CALL,CAJN,CAeN;;OAGAC,QAlBM,oBAkBK,CACT,KAAKC,SAAL,EACD,CApBK,CAqBN;;OAGAA,SAxBM,qBAwBM,CACV,GAAG,KAAKC,EAAL,CAAQ,aAAR,CAAH,CAA2B,CACzB,KAAKC,QAAL,CAAc,KAAKD,EAAL,CAAQ,aAAR,CAAd,CAAsC,+BAAtC,CACD,CACF,CA5BK,CA6BN;;;;OAKAE,qBAlCM,iCAkCkB,CACtB;AACA,KAAKC,mBAAL,CAA2B,KAA3B,CACA,KAAKJ,SAAL,GACA,KAAKK,WAAL,CAAmB,KAAKX,aAAL,EAAsB,KAAKA,aAAL,CAAmBY,KAAzC,EAAkD,KAAKZ,aAAL,CAAmBY,KAAnB,CAAyBC,MAAzB,CAAkC,CAAvG,CACA,KAAKC,GAAL,CAAS,OAAT,CAAkB,KAAKd,aAAL,CAAmBY,KAArC,EACA,GAAG,KAAKD,WAAR,CAAqB,CACnB,KAAKI,KAAL,CAAW,UAAU,CACnB,GAAIC,YAAa,KAAKT,EAAL,CAAQ,aAAR,CAAjB,CACA,GAAG,CAAC,KAAKP,aAAL,CAAmBiB,KAAvB,CAA8B,CAC5B;AACA,IAAI,GAAIC,EAAR,GAAa,MAAKlB,aAAL,CAAmBY,KAAhC,CAAuC,CACrC,MAAO,MAAKZ,aAAL,CAAmBY,KAAnB,CAAyBM,CAAzB,EAA4BC,QACpC,CACF,CACD,IAAI,GAAIC,IAAR,GAAe,MAAKpB,aAApB,CAAmC,CACjCgB,WAAWF,GAAX,CAAeM,GAAf,CAAoB,KAAKpB,aAAL,CAAmBoB,GAAnB,CAApB,CACD,CACD,KAAKL,KAAL,CAAW,UAAW,CACpB,GAAIM,UAAWxB,QAAQyB,GAAR,CAAYN,WAAWO,IAAvB,EAA6BC,aAA7B,CAA2C,WAA3C,CAAf,CACA;AACAH,SAASP,GAAT,CAAa,iBAAb,CAAgC,OAAhC,EACA,GAAIW,QAAS5B,QAAQyB,GAAR,CAAYN,WAAWO,IAAvB,EAA6BC,aAA7B,CAA2C,SAA3C,CAAb,CACA,GAAIE,QAAS7B,QAAQyB,GAAR,CAAYG,MAAZ,EAAoBD,aAApB,CAAkC,SAAlC,CAAb,CACA,GAAGE,MAAH,CAAW,CACTA,OAAOC,KAAP,CAAaC,KAAb,CAAqB,OACtB,CACD,KAAKC,MAAL,CAAYb,UAAZ,CAAwB,+BAAxB,CAAyD,eAAzD,EACA,KAAKN,mBAAL,CAA2B,IAC5B,CAXD,CAYD,CAvBD,CAwBD,CAzBD,IAyBO,CACL,KAAKA,mBAAL,CAA2B,IAC5B,CACF,CApEK,CAqEN;;OAGAoB,WAxEM,sBAwEMC,GAxEN,CAwEW,CACf,GAAIC,MAAOD,IAAIE,MAAJ,CAAWC,KAAX,EAAoBH,IAAIG,KAAJ,CAAUF,IAAzC,CACA,KAAKG,gBAAL,CAAsB,CACpBC,IAAKJ,KAAKI,GADU,CAEpBhB,IAAKY,KAAKZ,GAFU,CAAtB,CAID,CA9EK,CA+EN;;OAGAiB,aAlFM,wBAkFQN,GAlFR,CAkFa,CACjB,GAAIf,YAAa,KAAKT,EAAL,CAAQ,aAAR,CAAjB,CACA,GAAG,KAAKP,aAAL,CAAmBiB,KAAnB,EAA4BD,WAAWsB,qBAAX,GAAqCP,IAAIE,MAAJ,CAAWG,GAA/E,CAAoF,CAClF,KAAKD,gBAAL,CAAsBJ,IAAIE,MAA1B,CACD,CACF,CAvFK,CAwFN;;OAGAE,gBA3FM,2BA2FWF,MA3FX,CA2FmB,CACvBM,QAAQC,GAAR,CAAY,0BAAZ,CAAwC,KAAK9B,mBAA7C,EACA,GAAG,KAAKA,mBAAR,CAA6B,CAC3B,KAAK+B,IAAL,CAAU,4BAAV,CAAwCR,MAAxC,CACD,CACF,CAhGK,CAiGNS,WAjGM,sBAiGMV,IAjGN,CAiGY,CAChB,MAAOA,MAAKW,IAAL,EAAa,cACrB,CAnGK,CAoGNC,WApGM,sBAoGMZ,IApGN,CAoGY,CAChB,MAAOA,MAAK/B,IAAL,EAAa,EACrB,CAtGK,CAuGN4C,UAvGM,qBAuGKb,IAvGL,CAuGW,CACf,MAAOA,MAAKc,IAAL,EAAad,KAAKI,GAAlB,CAAuB,0BAAvB,CAAmD,EAC3D,CAzGK,CAAR,CA2GD,CA5GD","file":"px-action-buttons.js","sourcesContent":["(function() {\n  Polymer({\n\n    is: 'px-action-buttons',\n\n    properties: {\n      /**\n       * Action buttons to display below the description/copy text.\n       * Please refer to px-dropdown (https://github.com/PredixDev/px-dropdown) for a list of supported properties\n       */\n      actionButtons: {\n        type: Object,\n        value: {},\n        observer: '_actionButtonsChanged'\n      }\n    },\n    /**\n     * Call _unlisten() to detach event listeners for action buttons.\n     */\n    detached() {\n      this._unlisten();\n    },\n    /**\n     * Detach event listeners for action buttons.\n     */\n    _unlisten() {\n      if(this.$$('#pxDropdown')) {\n        this.unlisten(this.$$('#pxDropdown'), 'px-dropdown-selection-changed');\n      }\n    },\n    /**\n     * Observer when actionButtons changes.  \n     * Sets flag _isDropdown true if actionButtons size is greater than 3, false otherwise.\n     * If _isDropdown === true it will update px-dropdown options menu\n     */\n    _actionButtonsChanged() {\n      // set _notifyActionChange false to prevent firing px-dropdown-selection-changed while updating the new set of buttons\n      this._notifyActionChange = false;\n      this._unlisten();\n      this._isDropdown = this.actionButtons && this.actionButtons.items && this.actionButtons.items.length > 3;\n      this.set('items', this.actionButtons.items);\n      if(this._isDropdown) {\n        this.async(function(){\n          let pxDropdown = this.$$('#pxDropdown');\n          if(!this.actionButtons.multi) {\n            // remove selected if passed on when is not multi selection\n            for(var x in this.actionButtons.items) {\n              delete this.actionButtons.items[x].selected;\n            }\n          }\n          for(var key in this.actionButtons) {\n            pxDropdown.set(key, this.actionButtons[key]);\n          }\n          this.async(function() {\n            let dropdown = Polymer.dom(pxDropdown.root).querySelector('#dropdown');\n            // adjust dropdown to appear aligned to the right\n            dropdown.set('horizontalAlign', 'right');\n            let button = Polymer.dom(pxDropdown.root).querySelector('#button');\n            let pxIcon = Polymer.dom(button).querySelector('px-icon');\n            if(pxIcon) {\n              pxIcon.style.right = '-12px';\n            }\n            this.listen(pxDropdown, 'px-dropdown-selection-changed', '_itemSelected');\n            this._notifyActionChange = true;\n          });\n        });\n      } else {\n        this._notifyActionChange = true;\n      }\n    },\n    /**\n     * Callback for on-tap event for action items when the list size is 3 or less\n     */\n    _onSelected(evt) {\n      let item = evt.detail.model || evt.model.item;\n      this._handleSelection({\n        val: item.val, \n        key: item.key\n      });\n    },\n    /**\n     * Callback for selected/unselected action title dropdown items when the list is greater than 3\n     */\n    _itemSelected(evt) {\n      let pxDropdown = this.$$('#pxDropdown');\n      if(this.actionButtons.multi || pxDropdown._displayValueSelected === evt.detail.val) {\n        this._handleSelection(evt.detail);\n      }\n    },\n    /**\n     * Fires px-title-action with selection detail. E.g. {key: \"1\", val: \"Favorite\", selected: true}\n     */\n    _handleSelection(detail) {\n      console.log('this._notifyActionChange', this._notifyActionChange);\n      if(this._notifyActionChange) {\n        this.fire('px-title-on-action-clicked', detail);\n      }\n    },\n    _getBtnSize(item) {\n      return item.size || 'btn--default';\n    },\n    _getBtnType(item) {\n      return item.type || '';\n    },\n    _iconStyle(item) {\n      return item.icon && item.val? '--iron-icon-height: 12px': '';\n    }\n  });\n})();\n"]}